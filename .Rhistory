scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
data <- t(log2(assay(res_ven, "normalized_filled_imputed")))
scaledData <- scale(data[, TopPar], scale = TRUE)
scPCA <- svd(data)
scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
data <- t(log2(assay(res_plas, "normalized_filled_imputed")))
scaledData <- scale(data[, TopPar], scale = TRUE)
scPCA <- svd(data)
scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
data <- t(log2(assay(res_cap, "normalized_filled_imputed")))
scaledData <- scale(data, scale = TRUE)
scPCA <- svd(data)
scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
options(rgl.useNULL = TRUE)
library(rgl)
TopPar <- c("FT0154", "FT0415", "FT0384", "FT0051", "FT0307", "FT0162",
"FT0486", "FT0527", "FT0378", "FT0160", "FT0099", "FT0215",
"FT0581", "FT0031", "FT0249", "FT0182", "FT0168", "FT0270",
"FT0216", "FT0226", "FT0280", "FT0165", "FT1588", "FT0281",
"FT0146", "FT0117", "FT0422", "FT0328", "FT0112") ## list of your top n selected parameters
data <- t(log2(assay(res_cap, "normalized_filled_imputed")))
scaledData <- scale(data[, TopPar], scale = TRUE)
scPCA <- svd(data)
scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
pc <- prcomp(t(log2(assay(res_ven, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(res_ven$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(res_ven$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
options(rgl.useNULL = TRUE)
library(rgl)
TopPar <- c("FT0168", "FT0216", "FT0215", "FT0307", "FT0249", "FT0165",
"FT0581", "FT0270", "FT0031") ## list of your top n selected parameters
data <- t(log2(assay(res_cap, "normalized_filled_imputed")))
scaledData <- scale(data[, TopPar], scale = TRUE)
scPCA <- svd(data)
scPCA.scores <- scPCA$u %*% diag(scPCA$d)    ## scores
scPCA.loadings <- scPCA$v                    ## loadings
scPCA.variances <- round(100*((scPCA$d^2) / sum(scPCA$d^2)), 1) ## variances
plot3d(scPCA.scores[,1], scPCA.scores[,2], scPCA.scores[,3], xlab=paste(
"PC 1(",scPCA.variances[1],"%)",sep=""), ylab=paste("PC 2(",
scPCA.variances[2],"%)",sep=""),zlab=paste("PC 3(",scPCA.variances[3],
"%)",sep=""), pch=19, col = col_sex)
rglwidget()
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
## Set general parameters
polarity <- "POS" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "untargeted_matrix_pos"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
load("data/RData/vams_normalization_pos/res_pos.RData")
res_qc <- res_pos[, res_pos$source == "all"]
res_pos <- res_pos[, res_pos$source != "all"]
res_rbc <- res_pos[, res_pos$source == "RBC"]
res_pos <- res_pos[, res_pos$source != "RBC"]
res_pos$source <- factor(as.character(res_pos$source))
res_pos$sex <- factor(as.character(res_pos$sex))
col_source <- brewer.pal(5, name = "Set1")
names(col_source) <- c("RBC",           #' red
"plasma",        #' blue
"all",           #' green
"capillary",     #' purple
"venous")        #' orange
col_sex <- brewer.pal(4, name = "Set1") [c(1, 2, 3)]
names(col_sex) <- c("F",           # red
"M",           # blue
"POOL")        # green
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
tab <- colData(res_pos)[, c("source", "sex", "age")]
pandoc.table(as.data.frame(tab), style = "rmarkdown",
caption = "Samples used in this analysis")
#' Average
averageSE <- function(x, column = character(), mainAssay = character()) {
if (!column %in% colnames(colData(x)))
stop("Column '", "' not found in 'colData' of 'x'")
f <- factor(colData(x)[, column], levels = unique(colData(x)[, column]))
## new colData: take the first element for each replicate.
cd <- colData(x)[match(levels(f), f), ]
## loop over the assays and average them.
a <- lapply(assays(x), function(z) {
z <- split.data.frame(t(z), f = f)
z <- do.call(cbind, lapply(z, colMeans, na.rm = TRUE))
z[is.na(z)] <- NA
z
})
if (length(mainAssay)) {
tmp <- split.data.frame(t(assay(x, mainAssay)), f = f)
tmp <- do.call(cbind, lapply(tmp, function(y) {
apply(y, MARGIN = 2, FUN = sd, na.rm = TRUE)
}))
tmp[is.na(tmp)] <- NA
a[[paste0(mainAssay, "_sd")]] <- tmp
}
SummarizedExperiment(assays = a, rowData = rowData(x),
colData = cd, metadata = metadata(x))
}
## Average technical replicates:
res_pos <- averageSE(res_pos, column = "source_sample",
mainAssay = "normalized_filled")
tab <- colData(res_pos)[, c("source", "sex", "age")]
pandoc.table(as.data.frame(tab), style = "rmarkdown",
caption = "Samples used in this analysis")
rsds <- rowRsd(assay(res_qc, "normalized_filled"))
dratios_ven <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "venous"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_rbc <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "RBC"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_cap <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "capillary"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_pla <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "plasma"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios <- apply(cbind(dratios_ven, dratios_cap, dratios_pla),
MARGIN = 1, mean, na.rm = TRUE)
dratios[is.infinite(dratios)] <- NA
par(mfrow = c(1, 2))
plot(density(rsds, na.rm = TRUE), xlab = "RSD",
main = "Distribution of RSD values")
abline(v = 0.3, col = "red", lty = 2)
plot(density(dratios, na.rm = TRUE), xlab = "D-ratio",
main = "Distribution of D-ratios")
abline(v = 0.5, col = "red", lty = 2)
plot(log2(rsds), log2(dratios), xlab = expression(log[2]~RSD),
ylab = expression(log[2]~D-ratio), pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
res <- res_pos[which(dratios < 0.5), ]
keep <- moreAreValidThan(assay(res, "raw"), f = res$source, prop = 1/3)
res <- res[keep, ]
pc <- prcomp(t(log2(assay(res, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 1, pc_y = 2)
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
## Factor sample source, sex and age
source <- factor(res$source)
sex <- factor(res$sex)
age <- factor(res$age)
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
res$source
## Factor sample source, sex and age
source <- factor(res$source)
sex <- factor(res$sex)
age <- factor(res$age)
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
## Factor sample source, sex and age
source <- factor(res$source)
sex <- factor(res$sex)
age <- factor(res$age)
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
## Factor sample source, sex and age
source <- factor(res$source)
sex <- factor(res$sex)
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + source + sex)
fit <- lmFit(log2(assay(res, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
adjp <- apply(fit$p.value, 2, p.adjust, method = "BH")
tmp <- data.frame(
coef = fit$coefficient,
pvalue = fit$p.value,
adjp = adjp,
avg = res_avg,
significant = adjp < p.cut & abs(fit$coefficient) > m.cut
)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
adjp <- apply(fit$p.value, 2, p.adjust, method = "BH")
tmp <- data.frame(
coef = fit$coefficient,
pvalue = fit$p.value,
adjp = adjp,
significant = adjp < p.cut & abs(fit$coefficient) > m.cut
)
rowData(res) <- cbind(rowData(res), tmp)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "CapvsVen"],
pvalue = fit$p.value[, "CapvsVen"],
adjp = p.adjust(fit$p.value[, "CapvsVen"], method = "BH"),
avg.Cap = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "capillary"])),
avg.Ven = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "venous"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
CapvsVen <- add_result(res)
par(mfrow = c(1, 2))
hist(rowData(CapvsVen)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(CapvsVen)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano <- function(x) {
par(mfrow = c(1, 1))
plot(rowData(x)$coef, -log10(rowData(x)$adjp),
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060")
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
if (any(rowData(x)$significant)) {
points(rowData(x)$coef[rowData(x)$significant],
-log10(rowData(x)$adjp[rowData(x)$significant]),
col = "#0000ffcc")
}
}
plot_volcano(CapvsVen)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
invisible(tab)
}
tab <- res_table(CapvsVen)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.Cap", "avg.Ven", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
invisible(tab)
}
tab <- res_table(CapvsVen)
## Create heatmap
tmp <- log2(assay(
res, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(res)[, c("source", "sex")])
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
CapvsPlas <- add_result(CapvsPlas)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "CapvsPlas"],
pvalue = fit$p.value[, "CapvsPlas"],
adjp = p.adjust(fit$p.value[, "CapvsPlas"], method = "BH"),
avg.Cap = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "capillary"])),
avg.Plas = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "plasma"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
CapvsPlas <- add_result(res)
par(mfrow = c(1, 2))
hist(rowData(CapvsPlas)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(CapvsPlas)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano(CapvsPlas)
tab <- res_table(CapvsPlas)
## Create heatmap
tmp <- log2(assay(
CapvsPlas, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(CapvsPlas)[, c("source", "sex")])
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
## Create heatmap
tmp <- log2(assay(
CapvsVen, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(res)[, c("source", "sex")])
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
if (any(rowData(CapvsPlas)$significant)) {
tab <- rowData(CapvsPlas)[rowData(CapvsPlas)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.Cap", "avg.Plas", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
}
## Create heatmap
tmp <- log2(assay(
CapvsPlas, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(CapvsPlas)[, c("source", "sex")])
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "VenvsPlas"],
pvalue = fit$p.value[, "VenvsPlas"],
adjp = p.adjust(fit$p.value[, "VenvsPlas"], method = "BH"),
avg.Ven = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "venous"])),
avg.Plas = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$source == "plasma"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
VenvsPlas <- add_result(res)
par(mfrow = c(1, 2))
hist(rowData(res_plas)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
par(mfrow = c(1, 2))
hist(rowData(res_plas)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
par(mfrow = c(1, 2))
hist(rowData(VenvsPlas)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(VenvsPlas)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano(VenvsPlas)
if (any(rowData(VenvsPlas)$significant)) {
tab <- rowData(VenvsPlas)[rowData(CapvsPlas)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.Ven", "avg.Plas", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
}
## Create heatmap
tmp <- log2(assay(
VenvsPlas, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(VenvsPlas)[, c("source", "sex")])
##pm <- pheatmap(tmp, annotation_col = ann, labels_col = 1:ncol(res),
#               annotation_color = list(group = col_group,
#                                   sex = col_sex))
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
par(mfrow = c(3, 2))
hist(rowData(res)$pvalue.CapvsPlas, breaks = 64, xlab = "p value",
main = "Capillary vs plasma")
hist(rowData(res)$adjp.CapvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs plasma")
hist(rowData(res)$pvalue.VenvsPlas, breaks = 64, xlab = "p value",
main = "Venous vs plasma")
hist(rowData(res)$adjp.VenvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Venous vs plasma")
hist(rowData(res)$pvalue.CapvsVen, breaks = 64, xlab = "p value",
main = "Capillary vs venous")
hist(rowData(res)$adjp.CapvsVen, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs venous")
tab <- colSums(as.matrix(rowData(res)[, grep("significant",
colnames(rowData(res)))]))
pandoc.table(tab, style = "rmarkdown",
caption = "Number of significant metabolites.")
plot_volcano(VenvsPlas)
