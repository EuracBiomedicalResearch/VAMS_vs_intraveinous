main = "Distribution of adjusted p-values")
par(mfrow = c(1, 1))
plot(rowData(res_plas)$coef, -log10(rowData(res_plas)$adjp),
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060")
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
if (any(rowData(res_plas)$significant)) {
points(rowData(res_plas)$coef[rowData(res_plas)$significant],
-log10(rowData(res_plas)$adjp[rowData(res_plas)$significant]),
col = "#0000ffcc")
}
## Write result table
if (any(rowData(res_plas)$significant)) {
tab <- rowData(res_plas)[rowData(res_plas)$significant,
c("name", "mzmed", "rtmed", "coef", "adjp"
)]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(res_plas)[order(rowData(res_plas)$pvalue),
c("name", "mzmed", "rtmed", "coef", "adjp"
)]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
library(beeswarm)
tab <- rowData(res_plas)[rownames(tab), ]
tmp <- log2(assay(res_plas, "normalized_filled_imputed")[rownames(tab),
, drop = FALSE])
rownames(tmp) <- tab$name
dr <- paste0(IMAGE_PATH, "standards-beeswarm-plas/")
dir.create(dr, recursive = TRUE, showWarnings = FALSE)
for (i in seq_len(nrow(tmp))) {
vals <- split(tmp[i, ], f = res_plas$sex)
col <- col_sex[names(vals)]
png(file = paste0(dr, rownames(tab)[i], "_", rownames(tmp)[i], ".png"),
width = 6 * phi, height = 6, units = "in", res = 300, pointsize = 12)
par(mar = c(5, 5, 5, 1))
beeswarm(vals, col = paste0(col, 80), pch = 16, cex = 1.5, spacing = 1.2,
cex.main = 1.5,
cex.lab = 1.5,
cex.axis = 1.3,
main = paste0(rownames(tab)[i], ": ", rownames(tmp)[i]),
ylab = expression(log[2]~intensity))
bxplot(vals, probs = 0.5, col = "#00000060", add = TRUE, width = 0.9)
dev.off()
}
beeswarm_feature <- function(x, main = x) {
a <- log2(assay(res_cap, "normalized_filled_imputed")[x, ])
a <- split(a, res_cap$sex)
b <- log2(assay(res_ven, "normalized_filled_imputed")[x, ])
b <- split(b, res_ven$sex)
c <- log2(assay(res_plas, "normalized_filled_imputed")[x, ])
c <- split(c, res_plas$sex)
par(mar = c(5, 4, 1, 1))
vals <- c(cap = a, ven = b, plas = c)
beeswarm(vals,
col = paste0(col_sex[c("F", "M", "F", "M", "F", "M")]),
pch = 16, main = main, ylab = expression(log[2]~intensity),
las = 2)
grid(nx = NA, ny = NULL)
bxplot(vals, probs = 0.5, col = "#00000060", add = TRUE, width = 0.9)
}
beeswarm_feature("FT1481", "SAH: FT1481")
beeswarm_feature("FT0312", "Citrulline: FT0312")
beeswarm_feature("FT0168", "L-Aspartic Acid: FT0168")
beeswarm_feature("FT0527", "C5 Carnitine: FT0527")
beeswarm_feature("FT0460", "Gluconic Acid: FT0460")
X <- rowData(res_cap)$coef
Y <- rowData(res_ven)$coef
plot(X, Y,
xlab = expression(coef[capillary]),
ylab = expression(coef[venous]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
X <- rowData(res_cap)$coef
Y <- rowData(res_plas)$coef
plot(X, Y,
xlab = expression(coef[capillary]),
ylab = expression(coef[plasma]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
X <- rowData(res_plas)$coef
Y <- rowData(res_ven)$coef
plot(X, Y,
xlab = expression(coef[plasma]),
ylab = expression(coef[venous]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
save(res_pos, file = paste0(RDATA_PATH, "res_pos.RData"))
sex_related_features <- subset(
is_info, is_info$name %in% c("L-Alanine (13C3, 99%; 15N, 99%)",
"L-Aspartic acid (13C4, 99%; 15N, 99%)",
"L-Serine (13C3, 99%; 15N, 99%)",
"L-Tyrosine (13C9, 99%; 15N, 99%)"))
mo
rowData(mo)
rownames(mo)
md
std_res
std_res$sample
md$name
sex_related_features <- subset(
md, md$name %in% c("5-Oxoproline", "Acetylcarnitine", "Alanine", "Arginine",
"Asparagine", "L-Aspartic Acid", "C4 Carnitine", "C5 Carnitine", "Caffeine",
"L-Carnitine", "Creatine", "Creatinine", "ADMA", "Glutamine", "Glucose",
"Glutamine", "Glycine", "Glycero-phosphocholine", "Glycine", "Histidine",
"Hypoxanthine", "C4 Carnitine", "Isoleucine", "C5 Carnitine", "Leucine",
"Lysine", "Methionine", "Methioninesulfoxide", "Acetylhistidine", "Ornithine",
"Palmitoylcarnitine", "Phenylalanine", "Taurine", "Threonine", "Tryptophan",
"Tyrosine", "Valine"))
sex_related_features
std_res <- query(mo)
rowData(std_res) <- cbind(rowData(std_res),
sex_related_features[rownames(std_res),
c("name", "HMDB")])
std_res_MF <- query(mo)
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB")])
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
res_rbc <- res_pos[, res_pos$source == "RBC"]
res_pos <- res_pos[, res_pos$source != "RBC"]
#' Average
averageSE <- function(x, column = character(), mainAssay = character()) {
if (!column %in% colnames(colData(x)))
stop("Column '", "' not found in 'colData' of 'x'")
f <- factor(colData(x)[, column], levels = unique(colData(x)[, column]))
## new colData: take the first element for each replicate.
cd <- colData(x)[match(levels(f), f), ]
## loop over the assays and average them.
a <- lapply(assays(x), function(z) {
z <- split.data.frame(t(z), f = f)
z <- do.call(cbind, lapply(z, colMeans, na.rm = TRUE))
z[is.na(z)] <- NA
z
})
if (length(mainAssay)) {
tmp <- split.data.frame(t(assay(x, mainAssay)), f = f)
tmp <- do.call(cbind, lapply(tmp, function(y) {
apply(y, MARGIN = 2, FUN = sd, na.rm = TRUE)
}))
tmp[is.na(tmp)] <- NA
a[[paste0(mainAssay, "_sd")]] <- tmp
}
SummarizedExperiment(assays = a, rowData = rowData(x),
colData = cd, metadata = metadata(x))
}
## Average technical replicates:
res_pos <- averageSE(res_pos, column = "sample_pair",
mainAssay = "normalized_filled")
std_res_MF <- query(mo)
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB")])
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
res_rbc <- res_pos[, res_pos$source == "RBC"]
res_pos <- res_pos[, res_pos$source != "RBC"]
#' Average
averageSE <- function(x, column = character(), mainAssay = character()) {
if (!column %in% colnames(colData(x)))
stop("Column '", "' not found in 'colData' of 'x'")
f <- factor(colData(x)[, column], levels = unique(colData(x)[, column]))
## new colData: take the first element for each replicate.
cd <- colData(x)[match(levels(f), f), ]
## loop over the assays and average them.
a <- lapply(assays(x), function(z) {
z <- split.data.frame(t(z), f = f)
z <- do.call(cbind, lapply(z, colMeans, na.rm = TRUE))
z[is.na(z)] <- NA
z
})
if (length(mainAssay)) {
tmp <- split.data.frame(t(assay(x, mainAssay)), f = f)
tmp <- do.call(cbind, lapply(tmp, function(y) {
apply(y, MARGIN = 2, FUN = sd, na.rm = TRUE)
}))
tmp[is.na(tmp)] <- NA
a[[paste0(mainAssay, "_sd")]] <- tmp
}
SummarizedExperiment(assays = a, rowData = rowData(x),
colData = cd, metadata = metadata(x))
}
## Average technical replicates:
res_pos <- averageSE(res_pos, column = "sample_pair",
mainAssay = "normalized_filled")
std_res_MF <- res_pos[rownames(res_pos) %in% std_info$feature, ]
rowData(std_res) <- cbind(rowData(std_res),
std_info[rownames(std_res), c("name", "HMDB.code")])
md$name
std_res_MF <- res_pos[rownames(res_pos) %in% md$ft, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
md$ft[rownames(std_res_MF),
c("name", "HMDB.code")])
std_res_MF <- res_pos[rownames(res_pos) %in% md, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
md[rownames(std_res_MF),
c("name", "HMDB.code")])
std_res_MF <- res_pos[rownames(res_pos) %in% md$name, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
md$name[rownames(std_res_MF),
c("name", "HMDB.code")])
std_info
std_info$feature
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB.code")])
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features$feature, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB.code")])
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features$name, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB.code")])
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB.code")])
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name")])
sex_related_features
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB")])
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB")])
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
std_res_MF
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name")])
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
sex_related_features[rownames(std_res_MF),
c("name", "HMDB")])
par(mfrow = c(1, 2))
plot_pca(std_res_MF, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res_MF$differentiation)
std_res_MF <- res_pos[rownames(res_pos) %in% sex_related_features, ]
std_res_MF
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
sex_related_features <- subset(
std_res, std_res$name %in% c("5-Oxoproline", "Acetylcarnitine", "Alanine", "Arginine",
"Asparagine", "L-Aspartic Acid", "C4 Carnitine", "C5 Carnitine", "Caffeine",
"L-Carnitine", "Creatine", "Creatinine", "ADMA", "Glutamine", "Glucose",
"Glutamine", "Glycine", "Glycero-phosphocholine", "Glycine", "Histidine",
"Hypoxanthine", "C4 Carnitine", "Isoleucine", "C5 Carnitine", "Leucine",
"Lysine", "Methionine", "Methioninesulfoxide", "Acetylhistidine", "Ornithine",
"Palmitoylcarnitine", "Phenylalanine", "Taurine", "Threonine", "Tryptophan",
"Tyrosine", "Valine"))
sex_related_features
std_info
std_res
sex_related_features$name
## Write result table
tab <- sex_related_features[, c("name", "HMDB")]
sex_related_features <- subset(
std_info, std_info$name %in% c("5-Oxoproline", "Acetylcarnitine", "Alanine", "Arginine",
"Asparagine", "L-Aspartic Acid", "C4 Carnitine", "C5 Carnitine", "Caffeine",
"L-Carnitine", "Creatine", "Creatinine", "ADMA", "Glutamine", "Glucose",
"Glutamine", "Glycine", "Glycero-phosphocholine", "Glycine", "Histidine",
"Hypoxanthine", "C4 Carnitine", "Isoleucine", "C5 Carnitine", "Leucine",
"Lysine", "Methionine", "Methioninesulfoxide", "Acetylhistidine", "Ornithine",
"Palmitoylcarnitine", "Phenylalanine", "Taurine", "Threonine", "Tryptophan",
"Tyrosine", "Valine"))
## Write result table
tab <- sex_related_features[, c("name", "HMDB")]
std_info$name
## Write result table
pandoc.table(sex_related_features[, c("name", "HMB")],
style = "rmarkdown", caption = "Known sex-related compounds.")
sex_related_features <- subset(
mo, mo$name %in% c("5-Oxoproline", "Acetylcarnitine", "Alanine", "Arginine",
"Asparagine", "L-Aspartic Acid", "C4 Carnitine", "C5 Carnitine", "Caffeine",
"L-Carnitine", "Creatine", "Creatinine", "ADMA", "Glutamine", "Glucose",
"Glutamine", "Glycine", "Glycero-phosphocholine", "Glycine", "Histidine",
"Hypoxanthine", "C4 Carnitine", "Isoleucine", "C5 Carnitine", "Leucine",
"Lysine", "Methionine", "Methioninesulfoxide", "Acetylhistidine", "Ornithine",
"Palmitoylcarnitine", "Phenylalanine", "Taurine", "Threonine", "Tryptophan",
"Tyrosine", "Valine"))
sex_related_features <- subset(
md, md$name %in% c("5-Oxoproline", "Acetylcarnitine", "Alanine", "Arginine",
"Asparagine", "L-Aspartic Acid", "C4 Carnitine", "C5 Carnitine", "Caffeine",
"L-Carnitine", "Creatine", "Creatinine", "ADMA", "Glutamine", "Glucose",
"Glutamine", "Glycine", "Glycero-phosphocholine", "Glycine", "Histidine",
"Hypoxanthine", "C4 Carnitine", "Isoleucine", "C5 Carnitine", "Leucine",
"Lysine", "Methionine", "Methioninesulfoxide", "Acetylhistidine", "Ornithine",
"Palmitoylcarnitine", "Phenylalanine", "Taurine", "Threonine", "Tryptophan",
"Tyrosine", "Valine"))
## Write result table
pandoc.table(sex_related_features[, c("name", "HMB")],
style = "rmarkdown", caption = "Sex-related compounds known from
literature.")
sex_related_features
## Write result table
pandoc.table(sex_related_features[, c("name", "HMDB")],
style = "rmarkdown", caption = "Sex-related compounds known from
literature.")
std_res_MF <- query(mo)
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
md[rownames(std_res_MF), c("name", "HMDB")])
res_rbc <- res_pos[, res_pos$source == "RBC"]
res_pos <- res_pos[, res_pos$source != "RBC"]
std_res_MF <- query(mo)
rowData(std_res_MF) <- cbind(rowData(std_res_MF),
md[rownames(std_res_MF), c("name", "HMDB")])
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
std_res_MF$source
res_rbc <- res_pos[, res_pos$source == "RBC"]
std_res_MF <- std_res_MF[, std_res_MF$source != "RBC"]
pc <- prcomp(t(log2(assay(std_res_MF, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
pch <- rep(21, ncol(std_res_MF))
pch[std_res_MF$sex == "M"] <- 22
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
pch <- rep(21, ncol(std_res_MF))
pch[std_res_MF$sex == "M"] <- 1
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex[, col_sex != "POOL"]),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(std_res_MF$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
pch <- rep(21, ncol(std_res_MF))
pch[std_res_MF$sex == "M"] <- 22
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = pch, ncol = 2)
pch <- rep(21, ncol(std_res_MF))
pch[std_res_MF$sex == "M"] <- 1
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_source[as.character(std_res_MF$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = pch, ncol = 2)
res_cap = std_res_MF[, std_res_MF$source == "capillary"]
res_ven = std_res_MF[, std_res_MF$source == "venous"]
res_plas = std_res_MF[, std_res_MF$source == "plasma"]
pc <- prcomp(t(log2(assay(res_cap, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(res_cap$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(res_cap$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
pc <- prcomp(t(log2(assay(res_ven, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(res_ven$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(res_ven$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(res_plas$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(res_plas$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
pc <- prcomp(t(log2(assay(res_plas, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_sex[as.character(res_plas$sex)], 90),
pc_x = 1, pc_y = 2, labels = std_res$differentiation)
plot_pca(pc, col = paste0(col_sex[as.character(res_plas$sex)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_sex, legend = names(col_sex),
title = "phenotype", pch = 16, ncol = 2)
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, dev = c("png", "pdf"))
## Set general parameters
polarity <- "POS" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "semi_t_matrices_pos"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
load("data/RData/vams_normalization_pos/res_pos.RData")
res_pos$sample_pair <- paste0(res_pos$source, ".", res_pos$sample)
