tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
res_cap <- add_result(res_cap)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
}
res_table(res_cap)
top_100 <- function(x) {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed","rtmed", "coef", "adjp",
"avg.F", "avg.M")]
as.data.frame(tab[1:100, ])
}
top_100_cap <- top_100(res_cap)
top_100_ven <- top_100(res_ven)
res_table(res_plas)
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_ven$sex)
age <- res_ven$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_ven, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_ven <- add_result(res_ven)
plot_volcano(res_ven)
res_table(res_ven)
## Factor sample source and sex
sex <- factor(res_plas$sex)
age <- res_plas$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_plas, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_plas <- add_result(res_plas)
res_table(res_plas)
top_100 <- function(x) {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed","rtmed", "coef", "adjp",
"avg.F", "avg.M")]
as.data.frame(tab[1:100, ])
}
top_100_cap <- top_100(res_cap)
top_100_ven <- top_100(res_ven)
top_100_plas <- top_100(res_plas)
listInput <- list(capillary = rownames(top_100_cap),
venous = rownames(top_100_ven),
plasma = rownames(top_100_plas))
upset(fromList(listInput), order.by = "freq")
rowData(res_cap)
rowData(res_cap)$coed
rowData(res_cap)$coef
plot(log2(rowData(res_cap)$coef), log2(rowData(res_ven)$coef), xlab = expression(log[2]~capillary),
ylab = expression(log[2]~venous), pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
plot(log2(rowData(res_cap)$coef), log2(rowData(res_ven)$coef),
xlab = expression(log[2]~coef of capillary blood samples),
plot(log2(rowData(res_cap)$coef), log2(rowData(res_ven)$coef),
xlab = expression(log[2]~coef-all-feat-capillary-samples),
ylab = expression(log[2]~coef-all-feat-venous-samples),
pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
plot(log2(rowData(res_cap)$coef), log2(rowData(res_plas)$coef),
xlab = expression(log[2]~coef-all-feat-capillary-samples),
ylab = expression(log[2]~coef-all-feat-plasma-samples),
pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
plot(log2(rowData(res_plas)$coef), log2(rowData(res_ven)$coef),
xlab = expression(log[2]~coef-all-feat-plasma-samples),
ylab = expression(log[2]~coef-all-feat-venous-samples),
pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
load("data/RData/vams_normalization_pos/data_pos_filled.RData")
pData(data_pos) <- as.data.frame(pData(data_pos))
chrs <- featureChromatograms(data_pos, expandRt = 2,
features = rownames(tab),
filled = TRUE)
rowData(res_ven)$significant == TRUE
res <- res_pos[which(dratios < 0.4), ]
keep <- moreAreValidThan(assay(res, "raw"), f = res$source, prop = 0.2)
res <- res[keep, ]
## We subsample the sample sources
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_cap$sex)
age <- res_cap$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_cap, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "MvsF"],
pvalue = fit$p.value[, "MvsF"],
adjp = p.adjust(fit$p.value[, "MvsF"], method = "BH"),
avg.M = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "M"])),
avg.F = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "F"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
res_cap <- add_result(res_cap)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
}
res_table(res_cap)
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_ven$sex)
age <- res_ven$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_ven, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_ven <- add_result(res_ven)
res_table(res_ven)
## Factor sample source and sex
sex <- factor(res_plas$sex)
age <- res_plas$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_plas, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_plas <- add_result(res_plas)
res_table(res_plas)
#create an UpSetR plot
library(UpSetR)
listInput <- list(capillary = c("FT0021", "FT0366", "FT0364",
"FT1449", "FT1511", "FT0109", "FT0997",
"FT4763", "FT3991", "FT1004", "FT5452",
"FT2683", "FT0151", "FT2089",
"FT1711", "FT1913",
"FT4881", "FT5320", "FT5475", "FT0604",
"FT5078", "FT2024", "FT3677",
"FT4988",
"FT0368", "FT1693",
"FT3416"),
venous = c("FT1913", "FT1328", "FT2089", "FT2092"),
plasma = c("FT3363", "FT2023"))
upset(fromList(listInput), order.by = "freq")
res <- res_pos[which(dratios < 0.3), ]
keep <- moreAreValidThan(assay(res, "raw"), f = res$source, prop = 0.1)
res <- res[keep, ]
## We subsample the sample sources
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_cap$sex)
age <- res_cap$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_cap, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "MvsF"],
pvalue = fit$p.value[, "MvsF"],
adjp = p.adjust(fit$p.value[, "MvsF"], method = "BH"),
avg.M = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "M"])),
avg.F = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "F"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
res_cap <- add_result(res_cap)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
}
res_table(res_cap)
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_ven$sex)
age <- res_ven$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_ven, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_ven <- add_result(res_ven)
res_table(res_ven)
## Factor sample source and sex
sex <- factor(res_plas$sex)
age <- res_plas$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_plas, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_plas <- add_result(res_plas)
res_table(res_plas)
#create an UpSetR plot
library(UpSetR)
listInput <- list(capillary = c("FT0021", "FT0366", "FT0364",
"FT1449", "FT1511", "FT0109", "FT0997",
"FT4763", "FT1004", "FT5452",
"FT0151", "FT2089",
"FT1711", "FT1913",
"FT4881", "FT0604", "FT5475", "FT5320",
"FT3677",
"FT0368", "FT1693",
"FT3416"),
venous = c("FT1913", "FT1328", "FT2089"),
plasma = c("FT3363", "FT2023"))
upset(fromList(listInput), order.by = "freq")
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res, "raw"), f = res_cap, prop = 0.5)
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res_cap, "raw"), f = res_cap, prop = 0.5)
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res, "raw"), f = res, prop = 0.5)
res <- res_pos[which(dratios < 0.5), ]
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res, "raw"), f = res, prop = 0.5)
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res_cap, "raw"), f = res_cap$source, prop = 0.5)
#res_cap <- res_cap[keep, ]
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res_cap, "raw"), f = res_cap$source, prop = 0.5)
res_cap <- res_cap[keep, ]
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
keep <- moreAreValidThan(assay(res_cap, "raw"), f = res_cap$source, prop = 0.5)
res_cap <- res_cap[keep, ]
veep <- moreAreValidThan(assay(res_ven, "raw"), f = res_ven$source, prop = 0.5)
res_ven <- res_ven[veep, ]
peep <- moreAreValidThan(assay(res_plas, "raw"), f = res_plas$source, prop = 0.5)
res_plas <- res_plas[peep, ]
pc <- prcomp(t(log2(assay(res, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 1, pc_y = 2)
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
## We subsample the sample sources
#res_cap = res[, res$source == "capillary"]
#res_ven = res[, res$source == "venous"]
#res_plas = res[, res$source == "plasma"]
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_cap$sex)
age <- res_cap$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_cap, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "MvsF"],
pvalue = fit$p.value[, "MvsF"],
adjp = p.adjust(fit$p.value[, "MvsF"], method = "BH"),
avg.M = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "M"])),
avg.F = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "F"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
res_cap <- add_result(res_cap)
par(mfrow = c(1, 2))
hist(rowData(res_cap)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(res_cap)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano <- function(x) {
par(mfrow = c(1, 1))
plot(rowData(x)$coef, -log10(rowData(x)$adjp),
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060")
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
if (any(rowData(x)$significant)) {
points(rowData(x)$coef[rowData(x)$significant],
-log10(rowData(x)$adjp[rowData(x)$significant]),
col = "#0000ffcc")
}
}
plot_volcano(res_cap)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
}
res_table(res_cap)
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_ven$sex)
age <- res_ven$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_ven, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_ven <- add_result(res_ven)
par(mfrow = c(1, 2))
hist(rowData(res_ven)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(res_ven)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano(res_ven)
res_table(res_ven)
## Factor sample source and sex
sex <- factor(res_plas$sex)
age <- res_plas$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_plas, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_plas <- add_result(res_plas)
plot_volcano(res_plas)
res_table(res_plas)
#create an UpSetR plot
library(UpSetR)
listInput <- list(capillary = c("FT0021", "FT0366", "FT0363", "FT0364",
"FT1449", "FT1511", "FT0109", "FT0997",
"FT4763", "FT1004",
"FT0151", "FT2089",
"FT1711", "FT1913", "FT5075", "FT1113",
"FT4881", "FT0604", "FT5475", "FT5078",
"FT2024", "FT1251", "FT1981", "FT2739",
"FT0650",
"FT3248"),
venous = c("FT1913", "FT1328", "FT2089"),
plasma = c("FT0860", "FT0159"))
upset(fromList(listInput), order.by = "freq")
top_100 <- function(x) {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed","rtmed", "coef", "adjp",
"avg.F", "avg.M")]
as.data.frame(tab[1:100, ])
}
top_100_cap <- top_100(res_cap)
top_100_ven <- top_100(res_ven)
top_100_plas <- top_100(res_plas)
listInput <- list(capillary = rownames(top_100_cap),
venous = rownames(top_100_ven),
plasma = rownames(top_100_plas))
upset(fromList(listInput), order.by = "freq")
plot(log2(rowData(res_cap)$coef), log2(rowData(res_ven)$coef),
xlab = expression(log[2]~coef-all-feat-capillary-samples),
ylab = expression(log[2]~coef-all-feat-venous-samples),
pch = 16, col = "#00000040")
