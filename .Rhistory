knitr::opts_chunk$set(echo = TRUE, message = FALSE)
## Set general parameters
polarity <- "NEG" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "diff_analysis_untargeted_neg"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
load("data/RData/vams_normalization_neg/res_neg.RData")
res_qc <- res_neg[, res_neg$source == "all"]
res_neg <- res_neg[, res_neg$source != "all"]
res_neg$source <- factor(as.character(res_neg$source))
res_neg$sex <- factor(as.character(res_neg$sex))
col_source <- brewer.pal(5, name = "Set1")
names(col_source) <- c("RBC",           #' red
"plasma",        #' blue
"all",           #' green
"capillary",     #' purple
"venous")        #' orange
col_sex <- brewer.pal(4, name = "Set1") [c(1, 2, 3)]
names(col_sex) <- c("F",           # red
"M",           # blue
"POOL")        # green
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
tab <- colData(res_neg)[, c("source", "sex", "age")]
pandoc.table(as.data.frame(tab), style = "rmarkdown",
caption = "Samples used in this analysis")
rsds <- rowRsd(assay(res_qc, "normalized_filled"))
dratios_ven <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_neg[, res_neg$source == "venous"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_rbc <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_neg[, res_neg$source == "RBC"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_cap <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_neg[, res_neg$source == "capillary"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_pla <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_neg[, res_neg$source == "plasma"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios <- apply(cbind(dratios_ven, dratios_rbc, dratios_cap, dratios_pla),
MARGIN = 1, mean, na.rm = TRUE)
dratios[is.infinite(dratios)] <- NA
par(mfrow = c(1, 2))
plot(density(rsds, na.rm = TRUE), xlab = "RSD",
main = "Distribution of RSD values")
abline(v = 0.3, col = "red", lty = 2)
plot(density(dratios, na.rm = TRUE), xlab = "D-ratio",
main = "Distribution of D-ratios")
abline(v = 0.5, col = "red", lty = 2)
plot(log2(rsds), log2(dratios), xlab = expression(log[2]~RSD),
ylab = expression(log[2]~D-ratio), pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
res <- res_neg[which(dratios < 0.5), ]
keep <- moreAreValidThan(assay(res, "raw"), f = res$source, prop = 1/3)
res <- res[keep, ]
pc <- prcomp(t(log2(assay(res, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 1, pc_y = 2)
plot_pca(pc, col = paste0(col_source[as.character(res$source)], 90),
pc_x = 3, pc_y = 4)
legend("topleft", col = col_source, legend = names(col_source),
title = "phenotype", pch = 16, ncol = 2)
## We subsample the sample sources
res_cap = res[, res$source == "capillary"]
res_ven = res[, res$source == "venous"]
res_plas = res[, res$source == "plasma"]
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_cap$sex)
age <- res_cap$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_cap, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
add_result <- function(x) {
## Generate result data frame
tmp <- data.frame(
coef = fit$coefficient[, "MvsF"],
pvalue = fit$p.value[, "MvsF"],
adjp = p.adjust(fit$p.value[, "MvsF"], method = "BH"),
avg.M = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "M"])),
avg.F = rowMeans(
log2(assay(x, "normalized_filled_imputed")[, x$sex == "F"]))
)
## Evaluate which features are significant
tmp$significant <- abs(tmp$coef) > m.cut & tmp$adjp < p.cut
tmp$RSD_QC <- rsds[rownames(rowData(x))]
tmp$Dratio <- dratios[rownames(rowData(x))]
## Add data frame to res
rowData(x) <- cbind(rowData(x), tmp)
x
}
res_cap <- add_result(res_cap)
par(mfrow = c(1, 2))
hist(rowData(res_cap)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(res_cap)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano <- function(x) {
par(mfrow = c(1, 1))
plot(rowData(x)$coef, -log10(rowData(x)$adjp),
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060")
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
if (any(rowData(x)$significant)) {
points(rowData(x)$coef[rowData(x)$significant],
-log10(rowData(x)$adjp[rowData(x)$significant]),
col = "#0000ffcc")
}
}
plot_volcano(res_cap)
res_table <- function(x) {
## Write result table
if (any(rowData(x)$significant)) {
tab <- rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tab <- tab[order(tab$adjp, abs(tab$coef)), ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Features with significant differences in abundances.")
} else {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed", "rtmed", "coef", "adjp",
"avg.F", "avg.M", "RSD_QC", "Dratio")]
tab <- tab[1:20, ]
pandoc.table(
as.data.frame(tab), style = "rmarkdown",
caption = "Top 20 features with the smallest p-values.")
}
}
res_table(res_cap)
## Create heatmap
tab <- rowData(res_cap)[rowData(res_cap)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tmp <- log2(assay(
res_cap, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(res_cap)[, c("source", "sex")])
##pm <- pheatmap(tmp, annotation_col = ann, labels_col = 1:ncol(res),
#               annotation_color = list(group = col_group,
#                                   sex = col_sex))
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
breaks = seq(-5, 5, length.out = 101),
annotation_color = list(source = col_source,
sex = col_sex))
tmp <- data.frame(
heatmap = pm$tree_row$order
)
#We first have a look at the capillary blood samples
## Factor sample source and sex
sex <- factor(res_ven$sex)
age <- res_ven$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_ven, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_ven <- add_result(res_ven)
par(mfrow = c(1, 2))
hist(rowData(res_ven)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(res_ven)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano(res_ven)
res_table(res_ven)
## Create heatmap
tab <- rowData(res_ven)[rowData(res_ven)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tmp <- log2(assay(
res_ven, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(res_ven)[, c("source", "sex")])
##pm <- pheatmap(tmp, annotation_col = ann, labels_col = 1:ncol(res),
#               annotation_color = list(group = col_group,
#                                   sex = col_sex))
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
tmp <- data.frame(
heatmap = pm$tree_row$order
)
## Factor sample source and sex
sex <- factor(res_plas$sex)
age <- res_plas$age
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + sex)
fit <- lmFit(log2(assay(res_plas, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
MvsF = sexM - sexF,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
res_plas <- add_result(res_plas)
par(mfrow = c(1, 2))
hist(rowData(res_plas)$pvalue, breaks = 64, xlab = "p value",
main = "Distribution of raw p-values")
hist(rowData(res_plas)$adjp, breaks = 64, xlab = expression(p[BH]~value),
main = "Distribution of adjusted p-values")
plot_volcano(res_plas)
res_table(res_plas)
## Create heatmap
tab <- rowData(res_plas)[rowData(res_plas)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")]
tmp <- log2(assay(
res_plas, "normalized_filled_imputed")[rownames(tab), , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- as.data.frame(colData(res_plas)[, c("source", "sex")])
##pm <- pheatmap(tmp, annotation_col = ann, labels_col = 1:ncol(res),
#               annotation_color = list(group = col_group,
#                                   sex = col_sex))
pm <- pheatmap(tmp, annotation_col = ann, labels_col = colnames(tmp),
annotation_color = list(source = col_source,
sex = col_sex))
tmp <- data.frame(
heatmap = pm$tree_row$order
)
#create an UpSetR plot
library(UpSetR)
res_sig <- function(x) {
if (any(rowData(x)$significant)) {
as.data.frame(rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")])
}}
cap_sig <- res_sig(res_cap)
ven_sig <- res_sig(res_ven)
plas_sig <- res_sig(res_plas)
listInput <- list(capillary = rownames(cap_sig),
venous = rownames(ven_sig),
plasma = rownames(plas_sig))
upset(fromList(listInput), order.by = "freq")
## TODO:
##     - identify features significant in at least one sample matrix
##     - create heatmap of their coefficient in the 3 sample matrices
##     - are the coefficients similar? do they have the same sign (same color on heatmap)?
## HINTS:
##     - combine the rownames of cap_sig etc and use `unique` to identify
##     - use `cbind` to combine the $coef of cap_sig etc
##     - create heatmap of that matrix, no centering ( - rowMeans(...) is required.
ids <- unique(c(rownames(cap_sig), rownames(ven_sig), rownames(plas_sig)))
all_coef <- cbind(capillary = rowData(res_cap)[ids, "coef"],
venous = rowData(res_ven)[ids, "coef"],
plasma = rowData(res_plas)[ids, "coef"])
pheatmap(all_coef)
top_100 <- function(x) {
tab <- rowData(x)[order(rowData(x)$pvalue),
c("mzmed","rtmed", "coef", "adjp",
"avg.F", "avg.M")]
as.data.frame(tab[1:100, ])
}
top_100_cap <- top_100(res_cap)
top_100_ven <- top_100(res_ven)
top_100_plas <- top_100(res_plas)
listInput <- list(capillary = rownames(top_100_cap),
venous = rownames(top_100_ven),
plasma = rownames(top_100_plas))
upset(fromList(listInput), order.by = "freq")
X <- rowData(res_cap)$coef
Y <- rowData(res_ven)$coef
plot(X, Y,
xlab = expression(coef[capillary]),
ylab = expression(coef[venous]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
X <- rowData(res_cap)$coef
Y <- rowData(res_plas)$coef
plot(X, Y,
xlab = expression(coef[capillary]),
ylab = expression(coef[plasma]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
X <- rowData(res_ven)$coef
Y <- rowData(res_plas)$coef
plot(X, Y,
xlab = expression(coef[venous]),
ylab = expression(coef[plasma]),
pch = 16, col = "#00000040")
grid()
LM <- lm(Y ~ X)
abline(LM)
legend("topleft", paste0("R=", format(cor(X, Y), digits = 2)))
sessionInfo()
#create an UpSetR plot
library(UpSetR)
res_sig <- function(x) {
if (any(rowData(x)$significant)) {
as.data.frame(rowData(x)[rowData(x)$significant,
c("mzmed", "rtmed", "coef", "adjp",
"avg.M", "avg.F", "RSD_QC", "Dratio")])
}}
cap_sig <- res_sig(res_cap)
ven_sig <- res_sig(res_ven)
plas_sig <- res_sig(res_plas)
listInput <- list(capillary = rownames(cap_sig),
venous = rownames(ven_sig),
plasma = rownames(plas_sig))
upset(fromList(listInput), order.by = "freq")
install.packages("readxl")
install.packages("FactoMineR")
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("ptw")
install.packages("FactoMineR")
install.packages("FactoMineR")
library("FactoMineR")
install.packages('FactoMineR_2.4.zip', lib='destination_directory',repos = NULL)
install.packages('FactoMineR_2.4.zip',repos = NULL)
install.packages("C:/Users/User/Downloads/FactoMineR_2.4.zip", repos = NULL, type = "win.binary")
library("FactoMineR")
library("readxl")
library("tidyverse")
install.packages("tidyverse")
BiocManager::install
BiocManager::install("tidyverse")
install.packages("tidyverse")
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
## Set general parameters
polarity <- "POS" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "differential_abundance_pos"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
library(MetaboAnnotation)
BiocManager::install("RforMassSpectrometry/MetaboAnnotation")
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
## Set general parameters
polarity <- "POS" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "differential_abundance_pos"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
library(MetaboAnnotation)
load("data/RData/vams_normalization_pos/res_pos.RData")
res_pos$sample_pair <- paste0(res_pos$source, ".", res_pos$sample)
res_qc <- res_pos[, res_pos$source == "all"]
res_pos <- res_pos[, res_pos$source != "all"]
res_pos$source <- factor(as.character(res_pos$source))
res_pos$sex <- factor(as.character(res_pos$sex))
col_source <- brewer.pal(5, name = "Set1")
names(col_source) <- c("RBC",           #' red
"plasma",        #' blue
"all",           #' green
"capillary",     #' purple
"venous")        #' orange
col_sex <- brewer.pal(4, name = "Set1") [c(1, 2, 3)]
names(col_sex) <- c("F",           # red
"M",           # blue
"POOL")        # green
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
tab <- colData(res_pos)[, c("source", "sex", "age")]
pandoc.table(as.data.frame(tab), style = "rmarkdown",
caption = "Samples used in this analysis")
## Extract known compunds
library("MetaboCoreUtils")
library(Rdisop)
std_info <- read.table(
"https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/standards_dilution.txt",
sep = "\t", header = TRUE, as.is = TRUE)
std_info <- std_info[!is.na(std_info[, "POS"]), ]
rownames(std_info) <- 1:nrow(std_info)
std_info$mzneut = NA
std_info$mz_ion = NA
for (i in seq(nrow(std_info))) {
if (grepl("C", std_info$formula[i])) {
std_info$mzneut[i] <- getMolecule(
as.character(std_info$formula[i]))$exactmass
} else {
std_info$mzneut[i] = as.numeric(std_info$formula[i])
}
## Calculate also the m/z
std_info$mz_ion[i] <- mass2mz(
std_info$mzneut[i], adduct = std_info[i, "POS"])[1, 1]
}
std_info <- std_info[!is.na(std_info$mz_ion), ]
std_info <- std_info[order(std_info$name), ]
## Manually adding an additional row for Creatinine and Creatine
to_add <- std_info[std_info$name %in% c("Creatinine", "Creatine"), ]
to_add$name <- paste0(to_add$name, "-full")
std_info <- rbind(std_info, to_add)
dr <- paste0(IMAGE_PATH, "/standards/")
dir.create(dr, recursive = TRUE, showWarnings = FALSE)
load("data/RData/vams_normalization_pos/data_pos_filled.RData")
## Subset to the samples we're currently analyzing.
tmp <- filterFile(data_pos, match(res_pos$mzML_file, data_pos$mzML_file),
keepFeatures = TRUE)
## Match feature's m/z and rt values against expecte values for standards.
rowData(res_pos)$ft <- row.names(res_pos)
## Note: would need a ppm of 40 to get Homocysteine-FT0178
par <- MzRtParam(tolerance = 0, ppm = 20, toleranceRt = 30)
mo <- matchMz(res_pos, std_info, param = par, mzColname = c("mzmed", "mz_ion"),
rtColname = c("rtmed", "RT"))
## Subset to matching features.
mo <- mo[whichQuery(mo)]
mo <- pruneTarget(mo)
chrs <- featureChromatograms(tmp, features = mo$ft, expandRt = 7, filled = TRUE)
sample_colors <- col_source[tmp$source]
for (i in seq_len(length(mo$ft))) {
chr <- chrs[i, ]
pks <- chromPeaks(chr)
fl <- mo$target_name[i]
png(paste0(dr, fl, "-", mo$ft[i], ".png"),
width = 10, height = 8, units = "cm", res = 300, pointsize = 6)
plot(chr, col = "#00000040",
peakCol = paste0(sample_colors[pks[, "column"]], 50),
peakBg = paste0(sample_colors[pks[, "column"]], 10))
abline(v = mo$target_RT[i])
legend("topleft", legend = c(mo$ft[i], fl,
paste0("rt: ", mo$target_RT[i]),
paste0("mz: ", mo$target_mz_ion[i])))
dev.off()
}
update.packages()
update.packages("htmltools")
library("htmltools")
version("htmltools")
update.packages("mzR")
update.packages("MatrixGenerics")
update.packages("GenomeInfoDb")
