contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
adjp <- apply(fit$p.value, 2, p.adjust, method = "BH")
tmp <- data.frame(
coef = fit$coefficient,
pvalue = fit$p.value,
adjp = adjp,
significant = adjp < p.cut & abs(fit$coefficient) > m.cut
)
tmp$avg.Cap <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "capillary"]))
tmp$avg.Ven <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "venous"]))
tmp$avg.Plas <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "plasma"]))
rowData(res) <- cbind(rowData(res), tmp)
par(mfrow = c(3, 2))
hist(rowData(res)$pvalue.CapvsPlas, breaks = 64, xlab = "p value",
main = "Capillary vs plasma")
hist(rowData(res)$adjp.CapvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs plasma")
hist(rowData(res)$pvalue.VenvsPlas, breaks = 64, xlab = "p value",
main = "Venous vs plasma")
hist(rowData(res)$adjp.VenvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Venous vs plasma")
hist(rowData(res)$pvalue.CapvsVen, breaks = 64, xlab = "p value",
main = "Capillary vs venous")
hist(rowData(res)$adjp.CapvsVen, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs venous")
tab <- colSums(as.matrix(rowData(res)[, grep("significant",
colnames(rowData(res)))]))
pandoc.table(tab, style = "rmarkdown",
caption = paste0("Number of significant features of the in",
" total ", nrow(res), " analyzed features."))
plot_volcano <- function(x, contrast = y, main = "", xlim, ylim) {
X <- rowData(x)[, paste0("coef.", contrast)]
Y <- rowData(x)[, paste0("adjp.", contrast)]
minp <- min(Y[Y > 0])
Y[Y == 0] <- minp / 100
Y <- -log10(Y)
if (missing(xlim))
xlim <- range(X)
if (missing(ylim))
ylim <- range(Y)
plot(X, Y,
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060",
xlim = xlim, ylim = ylim, main = main)
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
sigs <- rowData(x)[, paste0("significant.", contrast)]
if (any(sigs))
points(X[sigs], Y[sigs], col = paste0(brewer.pal(3, "Set1")[2], "ce"))
}
par(mfrow = c(1, 3))
XL <- c(-15, 15)
YL <- c(0, 60)
plot_volcano(res, "CapvsVen", xlim = XL, ylim = YL,
main = "Capillary vs Venous")
grid()
plot_volcano(res, "CapvsPlas", xlim = XL, ylim = YL,
main = "Capillary vs Plasma")
grid()
plot_volcano(res, "VenvsPlas", xlim = XL, ylim = YL,
main = "Venous vs Plasma")
grid()
png(paste0(FIG_PATH, "FIG_POS_volcano_untargeted.png"),
width = 12, height = 4, units = "cm", res = 600, pointsize = 6)
par(mfrow = c(1, 3), mar = c(4, 4.2, 1.5, 0.5))
XL <- c(-15, 15)
YL <- c(0, 60)
plot_volcano(res, "CapvsVen", xlim = XL, ylim = YL,
main = "Capillary vs Venous")
grid()
plot_volcano(res, "CapvsPlas", xlim = XL, ylim = YL,
main = "Capillary vs Plasma")
grid()
plot_volcano(res, "VenvsPlas", xlim = XL, ylim = YL,
main = "Venous vs Plasma")
grid()
dev.off()
listInput <- list(CapvsVen = which(rowData(res)$significant.CapvsVen,
useNames = TRUE),
CapvsPlas = which(rowData(res)$significant.CapvsPlas,
useNames = TRUE),
VenvsPlas = which(rowData(res)$significant.VenvsPlas,
useNames = TRUE))
upset(fromList(listInput), order.by = "freq")
sig_CV <- which(rowData(res)$significant.CapvsVen, useNames = TRUE)
sig_CP <- which(rowData(res)$significant.CapvsPlas, useNames = TRUE)
sig_VP <- which(rowData(res)$significant.VenvsPlas, useNames = TRUE)
sig_ft <- unique(c(sig_CV, sig_CP, sig_VP))
## Create heatmap
tmp <- log2(assay(res, "normalized_filled_imputed")[sig_ft, , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- data.frame(source = colData(res)[, c("source")])
rownames(ann) <- colnames(tmp)
pm <- pheatmap(tmp, annotation_col = ann, labels_col = res$sample,
annotation_color = list(source = col_source),
labels_row = rep("", nrow(tmp)))
pheatmap(tmp, annotation_col = ann, labels_col = res$sample,
annotation_color = list(source = col_source),
labels_row = rep("", nrow(tmp)),
filename = paste0(FIG_PATH, "FIG_POS_heatmap_untargeted.png"),
width = 7, height = 10)
register(SerialParam())
load("data/RData/vams_normalization_pos/data_pos_filled.RData")
pData(data_pos) <- as.data.frame(pData(data_pos))
tmp <- mz(data_pos)
register(SerialParam())
load("data/RData/vams_normalization_pos/data_pos_filled.RData")
pData(data_pos) <- as.data.frame(pData(data_pos))
tmp <- mz(data_pos)
data_study <- filterFile(data_pos, match(res$mzML_file, data_pos$mzML_file),
keepFeatures = TRUE)
## Define the initial feature groups, i.e. assign all significant features
## to "FG" keeping all others to NA
fgs <- rep(NA_character_, nrow(featureDefinitions(data_study)))
names(fgs) <- rownames(featureDefinitions(data_study))
fgs[rownames(rowData(res))[rowData(res)$significant]] <- "FG"
featureGroups(data_study) <- fgs
plot(featureDefinitions(data_study)$rtmed, featureDefinitions(data_study)$mzmed,
xlab = "retention time", ylab = "m/z", main = "features",
col = "#00000080")
grid()
data_study <- groupFeatures(data_study, param = SimilarRtimeParam(5))
table(featureGroups(xdata))
plotFeatureGroups(data_study)
grid()
table(featureGroups(xdata))
plotFeatureGroups(data_study)
grid()
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed", "coef", "adjp")]
res$mzmed
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed")]
tab <- cbind(as.data.frame(tab), fgroup = fgroups)
pandoc.table(
tab, style = "rmarkdown",
caption = "Retention time-based feature grouping results.")
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed")]
tab <- cbind(as.data.frame(tab), fgroup = fgroups)
table(featureGroups(xdata))
pandoc.table(featureGroups(data_study)
pandoc.table(featureGroups(data_study))
table(featureGroups(data_study))
fvals <- log2(featureValues(
data_study, filled = TRUE, method = "sum")[rownames(tab), ])
fvals <- log2(featureValues(data_study, filled = TRUE))
cormat <- cor(t(fvals), use = "pairwise.complete.obs")
ann <- data.frame(fgroup = featureGroups(data_study))
rownames(ann) <- rownames(cormat)
res <- pheatmap(cormat, annotation_row = ann, cluster_rows = TRUE,
cluster_cols = TRUE)
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
## Set general parameters
polarity <- "POS" # specify "POS" or "NEG"
p.cut <- 0.05     # cut-off for significance.
m.cut <- 0.7      # cut-off for log2 fold change
set.seed(123)
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
FILE_NAME <- "untargeted_matrix_pos"
## Define paths:
IMAGE_PATH <- paste0("images/", FILE_NAME, "/")
if (dir.exists(IMAGE_PATH)) unlink(IMAGE_PATH, recursive = TRUE, force = TRUE)
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
RDATA_PATH <- paste0("data/RData/", FILE_NAME, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
RESULT_PATH <- paste0("data/results/", FILE_NAME, "/")
dir.create(RESULT_PATH, recursive = TRUE, showWarnings = FALSE)
library(xcms)
library(limma)
library(pheatmap)
library(writexl)
library(SummarizedExperiment)
library(RColorBrewer)
library(MsFeatures)
library(CompMetaboTools)
library(pander)
load("data/RData/vams_normalization_pos/res_pos.RData")
res_pos$sample_pair <- paste0(res_pos$source, ".", res_pos$sample)
res_qc <- res_pos[, res_pos$source == "all"]
res_pos <- res_pos[, res_pos$source != "all"]
res_rbc <- res_pos[, res_pos$source == "RBC"]
res_pos <- res_pos[, res_pos$source != "RBC"]
res_pos$source <- factor(as.character(res_pos$source))
res_pos$sex <- factor(as.character(res_pos$sex))
col_source <- brewer.pal(6, name = "Set1")[c(6, 2, 1)]
names(col_source) <- c("plasma",        #' yellow
"venous",        #' blue
"capillary")     #' red
col_sex <- brewer.pal(4, name = "Set1") [c(1, 2, 3)]
names(col_sex) <- c("F",           # red
"M",           # blue
"POOL")        # green
## Setting golden ratio to save images
phi <- (1+sqrt(5))/2
#' Average
averageSE <- function(x, column = character(), mainAssay = character()) {
if (!column %in% colnames(colData(x)))
stop("Column '", "' not found in 'colData' of 'x'")
f <- factor(colData(x)[, column], levels = unique(colData(x)[, column]))
## new colData: take the first element for each replicate.
cd <- colData(x)[match(levels(f), f), ]
## loop over the assays and average them.
a <- lapply(assays(x), function(z) {
z <- split.data.frame(t(z), f = f)
z <- do.call(cbind, lapply(z, colMeans, na.rm = TRUE))
z[is.na(z)] <- NA
z
})
if (length(mainAssay)) {
tmp <- split.data.frame(t(assay(x, mainAssay)), f = f)
tmp <- do.call(cbind, lapply(tmp, function(y) {
apply(y, MARGIN = 2, FUN = sd, na.rm = TRUE)
}))
tmp[is.na(tmp)] <- NA
a[[paste0(mainAssay, "_sd")]] <- tmp
}
SummarizedExperiment(assays = a, rowData = rowData(x),
colData = cd, metadata = metadata(x))
}
## Average technical replicates:
res_pos <- averageSE(res_pos, column = "source_sample",
mainAssay = "normalized_filled")
tab <- colData(res_pos)[, c("source", "sex", "age")]
pandoc.table(as.data.frame(tab), style = "rmarkdown",
caption = "Samples used in this analysis")
rsds <- rowRsd(assay(res_qc, "normalized_filled"))
dratios_ven <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "venous"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_cap <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "capillary"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios_pla <- apply(
log2(assay(res_qc, "normalized_filled")), 1, sd, na.rm = TRUE) /
apply(log2(assay(res_pos[, res_pos$source == "plasma"],
"normalized_filled")), 1, sd, na.rm = TRUE)
dratios <- apply(cbind(dratios_ven, dratios_cap, dratios_pla),
MARGIN = 1, mean, na.rm = TRUE)
dratios[is.infinite(dratios)] <- NA
par(mfrow = c(1, 2))
plot(density(rsds, na.rm = TRUE), xlab = "RSD",
main = "Distribution of RSD values")
abline(v = 0.3, col = "red", lty = 2)
plot(density(dratios, na.rm = TRUE), xlab = "D-ratio",
main = "Distribution of D-ratios")
abline(v = 0.5, col = "red", lty = 2)
plot(log2(rsds), log2(dratios), xlab = expression(log[2]~RSD),
ylab = expression(log[2]~D-ratio), pch = 16, col = "#00000040")
abline(v = log2(0.3), col = "red", lty = 2)
abline(h = log2(0.5), col = "red", lty = 2)
res <- res_pos[which(dratios < 0.5), ]
keep <- moreAreValidThan(assay(res, "raw"), f = res$source, prop = 1/3)
res <- res[keep, ]
pc <- prcomp(t(log2(assay(res, "normalized_filled_imputed"))),
center = TRUE, scale. = FALSE)
par(mfrow = c(1, 2))
col <- "#00000080"
plot_pca(pc, bg = paste0(col_source[as.character(res$source)], 90),
pc_x = 1, pc_y = 2, pch = 21, col = col)
legend("topright", col = col_source, legend = names(col_source),
pch = 16, ncol = 2)
plot_pca(pc, bg = paste0(col_source[as.character(res$source)], 90),
pc_x = 3, pc_y = 4, pch = 21, col = col)
FIG_PATH <- paste0(IMAGE_PATH, "FIG/")
dir.create(FIG_PATH, showWarnings = FALSE)
png(paste0(FIG_PATH, "FIG_POS_PCA_untargeted.png"), width = 9, height = 4.5,
res = 600, pointsize = 4, units = "cm")
par(mfrow = c(1, 2), mar = c(4.2, 4.5, 1.5, 1))
plot_pca(pc, bg = paste0(col_source[as.character(res$source)], 90),
pc_x = 1, pc_y = 2, pch = 21, col = col, cex = 1.5)
legend("topright", pt.bg = col_source, col = "#00000080",
legend = names(col_source), pch = 21)
plot_pca(pc, bg = paste0(col_source[as.character(res$source)], 90),
pc_x = 3, pc_y = 4, pch = 21, col = col, cex = 1.5)
dev.off()
plas <- assay(res, "raw")[, res$source == "plasma"]
plas_present <- moreAreValidThan(plas, prop = 1/3)
ven <- assay(res, "raw")[, res$source == "venous"]
ven_present <- moreAreValidThan(ven, prop = 1/3)
cap <- assay(res, "raw")[, res$source == "capillary"]
cap_present <- moreAreValidThan(cap, prop = 1/3)
#create an UpSetR plot
library(UpSetR)
listInput <- list(capillary = which(cap_present, useNames = TRUE),
venous = which(ven_present, useNames = TRUE),
plasma = which(plas_present, useNames = TRUE))
upset(fromList(listInput), order.by = "freq", sets.bar.color = col_source[c("venous", "capillary", "plasma")])
## Factor sample source, sex and age
source <- factor(res$source)
sex <- factor(res$sex)
## Fit the data to the desired design
dsgn <- model.matrix(~ 0 + source + sex)
fit <- lmFit(log2(assay(res, "normalized_filled_imputed")), design = dsgn)
## Fit the actual contrasts of interest
contr_mat <- makeContrasts(
CapvsVen = sourcecapillary - sourcevenous,
CapvsPlas = sourcecapillary - sourceplasma,
VenvsPlas = sourcevenous - sourceplasma,
levels = dsgn)
fit <- contrasts.fit(fit, contrasts = contr_mat)
fit <- eBayes(fit)
adjp <- apply(fit$p.value, 2, p.adjust, method = "BH")
tmp <- data.frame(
coef = fit$coefficient,
pvalue = fit$p.value,
adjp = adjp,
significant = adjp < p.cut & abs(fit$coefficient) > m.cut
)
tmp$avg.Cap <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "capillary"]))
tmp$avg.Ven <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "venous"]))
tmp$avg.Plas <- rowMeans(
log2(assay(res, "normalized_filled_imputed")[, res$source == "plasma"]))
rowData(res) <- cbind(rowData(res), tmp)
par(mfrow = c(3, 2))
hist(rowData(res)$pvalue.CapvsPlas, breaks = 64, xlab = "p value",
main = "Capillary vs plasma")
hist(rowData(res)$adjp.CapvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs plasma")
hist(rowData(res)$pvalue.VenvsPlas, breaks = 64, xlab = "p value",
main = "Venous vs plasma")
hist(rowData(res)$adjp.VenvsPlas, breaks = 64,
xlab = expression(p[BH]~value),
main = "Venous vs plasma")
hist(rowData(res)$pvalue.CapvsVen, breaks = 64, xlab = "p value",
main = "Capillary vs venous")
hist(rowData(res)$adjp.CapvsVen, breaks = 64,
xlab = expression(p[BH]~value),
main = "Capillary vs venous")
tab <- colSums(as.matrix(rowData(res)[, grep("significant",
colnames(rowData(res)))]))
pandoc.table(tab, style = "rmarkdown",
caption = paste0("Number of significant features of the in",
" total ", nrow(res), " analyzed features."))
plot_volcano <- function(x, contrast = y, main = "", xlim, ylim) {
X <- rowData(x)[, paste0("coef.", contrast)]
Y <- rowData(x)[, paste0("adjp.", contrast)]
minp <- min(Y[Y > 0])
Y[Y == 0] <- minp / 100
Y <- -log10(Y)
if (missing(xlim))
xlim <- range(X)
if (missing(ylim))
ylim <- range(Y)
plot(X, Y,
xlab = expression(log[2]~difference),
ylab = expression(-log[10]~p[BH]), pch = 16, col = "#00000060",
xlim = xlim, ylim = ylim, main = main)
rect(xleft = -100, ybottom = -log10(p.cut), xright = -m.cut, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
rect(xleft = m.cut, ybottom = -log10(p.cut), xright = 100, ytop = 100,
border = NA, col = paste0(brewer.pal(3, "Set1")[2], 10))
sigs <- rowData(x)[, paste0("significant.", contrast)]
if (any(sigs))
points(X[sigs], Y[sigs], col = paste0(brewer.pal(3, "Set1")[2], "ce"))
}
par(mfrow = c(1, 3))
XL <- c(-15, 15)
YL <- c(0, 60)
plot_volcano(res, "CapvsVen", xlim = XL, ylim = YL,
main = "Capillary vs Venous")
grid()
plot_volcano(res, "CapvsPlas", xlim = XL, ylim = YL,
main = "Capillary vs Plasma")
grid()
plot_volcano(res, "VenvsPlas", xlim = XL, ylim = YL,
main = "Venous vs Plasma")
grid()
png(paste0(FIG_PATH, "FIG_POS_volcano_untargeted.png"),
width = 12, height = 4, units = "cm", res = 600, pointsize = 6)
par(mfrow = c(1, 3), mar = c(4, 4.2, 1.5, 0.5))
XL <- c(-15, 15)
YL <- c(0, 60)
plot_volcano(res, "CapvsVen", xlim = XL, ylim = YL,
main = "Capillary vs Venous")
grid()
plot_volcano(res, "CapvsPlas", xlim = XL, ylim = YL,
main = "Capillary vs Plasma")
grid()
plot_volcano(res, "VenvsPlas", xlim = XL, ylim = YL,
main = "Venous vs Plasma")
grid()
dev.off()
listInput <- list(CapvsVen = which(rowData(res)$significant.CapvsVen,
useNames = TRUE),
CapvsPlas = which(rowData(res)$significant.CapvsPlas,
useNames = TRUE),
VenvsPlas = which(rowData(res)$significant.VenvsPlas,
useNames = TRUE))
upset(fromList(listInput), order.by = "freq")
sig_CV <- which(rowData(res)$significant.CapvsVen, useNames = TRUE)
sig_CP <- which(rowData(res)$significant.CapvsPlas, useNames = TRUE)
sig_VP <- which(rowData(res)$significant.VenvsPlas, useNames = TRUE)
sig_ft <- unique(c(sig_CV, sig_CP, sig_VP))
## Create heatmap
tmp <- log2(assay(res, "normalized_filled_imputed")[sig_ft, , drop = FALSE])
tmp <- tmp - rowMeans(tmp, na.rm = TRUE)
ann <- data.frame(source = colData(res)[, c("source")])
rownames(ann) <- colnames(tmp)
pm <- pheatmap(tmp, annotation_col = ann, labels_col = res$sample,
annotation_color = list(source = col_source),
labels_row = rep("", nrow(tmp)))
pheatmap(tmp, annotation_col = ann, labels_col = res$sample,
annotation_color = list(source = col_source),
labels_row = rep("", nrow(tmp)),
filename = paste0(FIG_PATH, "FIG_POS_heatmap_untargeted.png"),
width = 7, height = 10)
register(SerialParam())
load("data/RData/vams_normalization_pos/data_pos_filled.RData")
data_study <- filterFile(data_pos, match(res$mzML_file, data_pos$mzML_file),
keepFeatures = TRUE)
## Define the initial feature groups, i.e. assign all significant features
## to "FG" keeping all others to NA
fgs <- rep(NA_character_, nrow(featureDefinitions(data_study)))
names(fgs) <- rownames(featureDefinitions(data_study))
fgs[rownames(rowData(res))[rowData(res)$significant]] <- "FG"
featureGroups(data_study) <- fgs
plot(featureDefinitions(data_study)$rtmed, featureDefinitions(data_study)$mzmed,
xlab = "retention time", ylab = "m/z", main = "features",
col = "#00000080")
grid()
data_study <- groupFeatures(data_study, param = SimilarRtimeParam(5))
table(featureGroups(data_study))
plotFeatureGroups(data_study)
grid()
fvals <- log2(featureValues(data_study, filled = TRUE))
cormat <- cor(t(fvals), use = "pairwise.complete.obs")
ann <- data.frame(fgroup = featureGroups(data_study))
rownames(ann) <- rownames(cormat)
res <- pheatmap(cormat, annotation_row = ann, cluster_rows = TRUE,
cluster_cols = TRUE)
data_study <- groupFeatures(
data_study, AbundanceCorrelationParam(threshold = 0.7, filled = TRUE,
method = "sum"))
data_study <- groupFeatures(
data_study, AbundanceCorrelationParam(threshold = 0.5, filled = TRUE,
method = "sum"))
data_study <- groupFeatures(
data_study, AbundanceSimilarityParam(threshold = 0.5, filled = TRUE,
method = "sum"))
data_study <- groupFeatures(data_study, AbundanceSimilarityParam(threshold = 0.7,
transform = log2),
filled = TRUE)
data_study <- groupFeatures(data_study, AbundanceSimilarityParam(
threshold = 0.7, transform = log2), filled = TRUE)
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed", "coef", "adjp")]
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed", "coef")]
fgroups <- featureGroups(data_study)
names(fgroups) <- rownames(featureDefinitions(data_study))
fgroups <- fgroups[!is.na(fgroups)]
fgroups <- sort(fgroups)
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed", "coef", "adjp")]
tab <- rowData(res)[names(fgroups), c("mzmed", "rtmed", "coef", "adjp")]
table(featureGroups(data_study))
fts <- grep("FG.0082", featureGroups(xdata))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.0082")
fts <- grep("FG.0017", featureGroups(xdata))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.0017")
## Plot feature abundances?
fg <- "FG.001.001"
fts <- rownames(tab)[tab$fgroup == fg]
fts <- grep("FG.040", featureGroups(xdata))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.040")
fts <- grep("FG.0082", featureGroups(xdata))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.0082")
fts <- grep("FG.0082", featureGroups(data_study))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.0082")
fts <- grep("FG.0082", featureGroups(data_study))
pairs(t(fvals[fts, ]), gap = 0.1, main = "FG.0082")
data_study <- groupFeatures(
data_study, EicCorrelationParam(threshold = 0.7, n = 10, clean = TRUE))
data_study <- groupFeatures(
data_study, EicSimilarityParam(threshold = 0.7, n = 10))
